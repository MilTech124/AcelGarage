/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useRef } from "react";
import { useGLTF } from "@react-three/drei";
import Materials from "./Materials";

export function Model(props) {
  const {
    color,
    direction,
    width,
    depth,
    height,
    emboss,
    roof,
    roofColor,
    roofType,
    gateEmbose,
    gateDirection,
    gateCount,
    gateType1,
    gateColor1,
    gateWidth1,
    gateHeight1,
    gatePositionValue1,
    gateType2,
    gateColor2,
    gateWidth2,
    gateHeight2,
    gatePositionValue2,
    gateType3,
    gateColor3,
    gateWidth3,
    gateHeight3,
    gatePositionValue3,
    door,
    window,
    carport,
    carportWidth,
    carportSide,
  } = props.selectedOptions;

  const { nodes, materials } = useGLTF("/model/garaz.glb");
  const {
    roofMaterial,
    wallMaterial,
    gateMaterial1,
    gateMaterial3,
    gateMaterial2,
    doorMaterial1,
  } = Materials(props.selectedOptions);

  const Gate = ({ gateMaterial, position,scale }) => {
    return (
      <>
        <group position={position} scale={scale}>
          <mesh
            geometry={nodes.brama.geometry}
            material={gateMaterial}
            position={[3.004*depth/6, 1.033, 0]}
            rotation={[0, 0, -Math.PI / 2]}
            scale={[1, 1, 1.4]}//5
          />
          <mesh
            geometry={nodes["obramowka-drzwi001"].geometry}
            material={materials.czarna}
            position={[3.001*depth/6, 1.053, 0]}
            rotation={[0, 0, -Math.PI / 2]}
            scale={[1.02, 1.054, 1.45]} //55
          />
          <mesh
            geometry={nodes["brama-klamka"].geometry}
            material={materials.czarna}
            position={[3.013*depth/6, 1.032, 0.002]}
            scale={[0.017, 0.021, 0.017]}
          />
        </group>
      </>
    );
  };

  const Door = () => {
    return (
      <group>
        <mesh
          name="drzwi-klamka"
          geometry={nodes["drzwi-klamka"].geometry}
          material={materials.czarna}
          position={[3.061, 1.064, -1.813]}
          scale={[0.025, 0.02, 0.025]}
        />
        <mesh
          name="drzwi"
          geometry={nodes.drzwi.geometry}
          material={doorMaterial1}
          position={[2.963, 1.054, -2.175]}
          scale={[0.05, 1.021, 0.5]}
        />
        <mesh
          name="drzwi-obramowka"
          geometry={nodes["drzwi-obramowka"].geometry}
          material={materials.czarna}
          position={[2.963, 1.054, -2.175]}
          scale={[0.05, 1.021, 0.5]}
        />
      </group>
    );
  };

  const Carport = () => {
    const x = 1.5;

    return (
      <group rotation={[0, 0, 0]}>
        <group position={[0, 0, 0 + x]}>
          <mesh
            name="podpora-przod"
            geometry={nodes["podpora-przod"].geometry}
            material={nodes["podpora-przod"].material}
            position={[3.011, 1.069, 3]}
            scale={[0.025, 1.064, 0.025]}
          />
          <mesh
            name="podpora-srodek"
            geometry={nodes["podpora-srodek"].geometry}
            material={nodes["podpora-srodek"].material}
            position={[0.014, 1.069, 3]}
            scale={[0.025, 1.064, 0.025]}
          />
          <mesh
            name="podpora-tyl"
            geometry={nodes["podpora-tyl"].geometry}
            material={nodes["podpora-tyl"].material}
            position={[-2.958, 1.069, 3]}
            scale={[0.025, 1.064, 0.025]}
          />
        </group>
        <group scale={[1, 1, 1 * x]} rotation={[0, 0, 0]}>
          <mesh
            name="dach-lewy"
            geometry={nodes["dach-lewy"].geometry}
            material={nodes["dach-lewy"].material}
            position={[0, 2.641, 1.591]}
            rotation={[Math.PI / 9, 0, 0]}
            scale={[3.131, 1.137, 1.729]}
          />
          <mesh
            name="dach_-przod-wiata"
            geometry={nodes["dach_-przod-wiata"].geometry}
            material={nodes["dach_-przod-wiata"].material}
            position={[3, 2.571, 0]}
            rotation={[0, 0, -Math.PI / 2]}
            scale={[1, 1, 1]}
          />
          <mesh
            name="dach_-tyl-wiata"
            geometry={nodes["dach_-tyl-wiata"].geometry}
            material={nodes["dach_-tyl-wiata"].material}
            position={[-3, 2.571, 0]}
            rotation={[0, 0, -Math.PI / 2]}
            scale={[1, 1, 1]}
          />
        </group>
      </group>
    );
  };
  const Window = ({ number }) => {
    if (!number || number === undefined) {
      number = 0;
    }
    return (
      <group
        name="okno"
        position={
          window[number].position === "przod"
            ? [
                (3.006 * depth) / 6,
                1.631,
                width >= 6
                  ? (2.7 * width) / 6 - window[number].positionValue / 100
                  : (2 * width) / 6 - window[number].positionValue / 100,
              ]
            : window[number].position === "tył"
            ? [
                (-3.006 * depth) / 6,
                1.631,
                width >= 6
                  ? (2.7 * width) / 6 - window[number].positionValue / 100
                  : (2 * width) / 6 - window[number].positionValue / 100,
              ]
            : window[number].position === "lewo"
            ? [
                depth <= 6
                  ? (-2.4 * depth) / 6 + window[number].positionValue / 100
                  : (-2.7 * depth) / 6 + window[number].positionValue / 100,
                1.631,
                (3 * width) / 6,
              ]
            : window[number].position === "prawo"
            ? [
                depth <= 6
                  ? (-2.4 * depth) / 6 + window[number].positionValue / 100
                  : (-2.7 * depth) / 6 + window[number].positionValue / 100,
                1.631,
                (-3 * width) / 6,
              ]
            : null
        }
        rotation={
          window[number].position === "przod"
            ? [0, 0, 0]
            : window[number].position === "tył"
            ? [0, Math.PI / 1, 0]
            : window[number].position === "lewo"
            ? [0, -Math.PI / 2, 0]
            : window[number].position === "prawo"
            ? [0, -Math.PI / -2, 0]
            : [0, 0, 0]
        }
        scale={[0.02, 0.3, 0.4]}
      >
        <mesh
          name="Cube002"
          geometry={nodes.Cube002.geometry}
          material={materials.czarna}
        />
        <mesh
          name="Cube002_1"
          geometry={nodes.Cube002_1.geometry}
          material={materials["Material.004"]}
        />
      </group>
    );
  };

  const Roof = () => {
    return (
      <group
        visible={roof === "dwuspad" || roof === "dwuspad przod-tył"}
        scale={
          roof === "dwuspad"
            ? [1 * (depth / 6), (1 * height) / 213, 1 * (width / 6)]
            : roof === "dwuspad przod-tył"
            ? [1 * (width / 6), (1 * height) / 213, 1 * (depth / 6)]
            : null
        }
        position={[0, 0, 0]}
        rotation={
          roof === "dwuspad przod-tył"
            ? [0, -Math.PI / 2, 0]
            : roof === "dwuspad"
            ? [0, 0, 0]
            : null
        }
      >
        <mesh
          name="dach-lewy"
          visible={true}
          geometry={nodes["dach-lewy"].geometry}
          material={roofMaterial}
          position={[0, 2.641, 1.591]}
          rotation={[Math.PI / 9, 0, 0]}
          scale={[3.131, 1.137, 1.729]}
        />
        <mesh
          name="dach-prawy"
          geometry={nodes["dach-prawy"].geometry}
          material={roofMaterial}
          position={[0, 2.628, -1.618]}
          rotation={[-Math.PI / 9, 0, 0]}
          scale={[3.131, 1.137, 1.729]}
        />
        <mesh
          name="dach-tyl"
          geometry={nodes["dach-tyl"].geometry}
          material={wallMaterial}
          position={[-3, 2.571, 0]}
          rotation={[0, 0, -Math.PI / 2]}
        />
        <mesh
          name="dach-przod"
          geometry={nodes["dach-przod"].geometry}
          material={wallMaterial}
          position={[3, 2.571, 0]}
          rotation={[0, 0, -Math.PI / 2]}
        />
      </group>
    );
  };

  const RoofDirection = () => (
    <group
      scale={
        roof === "spad tył"
          ? [(1 * depth) / 6, (1 * height) / 213, (1 * width) / 6]
          : roof === "spad przód"
          ? [(1 * depth) / 6, (1 * height) / 213, (1 * width) / 6]
          : roof === "spad w prawo"
          ? [(1 * width) / 6, (1 * height) / 213, (1 * depth) / 6]
          : roof === "spad w lewo"
          ? [(1 * width) / 6, (1 * height) / 213, (1 * depth) / 6]
          : null
      }
      rotation={
        roof === "spad tył"
          ? [0, 0, 0]
          : roof === "spad przód"
          ? [0, Math.PI, 0]
          : roof === "spad w prawo"
          ? [0, -Math.PI / 2, 0]
          : roof === "spad w lewo"
          ? [0, Math.PI / 2, 0]
          : null
      }
    >
      <mesh
        name="bryla"
        geometry={nodes.bryla.geometry}
        material={wallMaterial}
        position={[0, 1.131, 0.006]}
        scale={[3, 1.102, 2.994]}
      />
      <mesh
        name="spadtyl"
        geometry={nodes.spadtyl.geometry}
        material={roofMaterial}
        position={[0, 2.427, -0.006]}
        rotation={[0, 0, 0.087]}
        scale={[3.131, 1.137, 3.1]}
      />
    </group>
  );
  console.log(gateCount);

  return (
    <group {...props} dispose={null} position={[0, -0.5, 0]}>
      {[...Array(gateCount)].map((_, index) => {
        let gateMaterial, position,scale;
        if (index === 0) {
          gateMaterial = gateMaterial1;
          position = [0,0,(width-gateWidth1)*0.5-gatePositionValue1/100];
          scale = [1,gateHeight1/190,
          gateWidth1/3];
        } else if (index === 1) {
          gateMaterial = gateMaterial2;
          position = [0,0,(width-gateWidth2)*0.5-gatePositionValue2/100];
          scale = [1,1,
          gateWidth2/3];
        } else if (index === 2) {
          gateMaterial = gateMaterial3;
          position = [0,0,(width-gateWidth3)*0.5-gatePositionValue3/100];
          scale = [1,1,
          gateWidth3/3];
        }
        return (
          <Gate key={index} gateMaterial={gateMaterial} position={position} scale={scale} />
        );
      })}

      <Door />
      {window.map((item, index) => (
        <Window number={index} key={index} />
      ))}

      <Roof />
      {/* <Carport />  */}
      <RoofDirection />
      <mesh
        name="calosc"
        visible={roof === "dwuspad" || roof === "dwuspad przod-tył"}
        geometry={nodes.calosc.geometry}
        material={wallMaterial}
        position={[0, (1.079 * height) / 213, 0]}
        scale={[3 * (depth / 6), 1.05 * (height / 213), 3 * (width / 6)]}
      />
    </group>
  );
}

useGLTF.preload("/model/garaz.glb");
